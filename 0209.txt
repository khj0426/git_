깃 - 브랜치


동시에 여러 개발자들이 프로젝트에서 각기 다른 기능을 개발할 수 있도록 브랜치 기능 제공

git저장소를 만들면 마스터(Master) 브랜치가 생성됨.

(항상 베포 가능해야 함)

Develop Branch 

Bug Fix Branch

합치기(Merge)가 이루어지기 전까지 안정적으로 배포가 이루어지다가,모든 기능이 합쳐진 이후 다시 배포 가능 하므로 안정성 증가


통합 브랜치 : 배포가 가능한 수준의 브랜치로 일반적으로 마스터 브랜치

토픽 브랜치 : 특정한 기능을 위해 만들어진 브랜치로 마스터 이외의 다른 브랜치

git branch : 현재 브랜치가 몇 개 존재하는가

git branch develop : develop 브랜치 생성

git checkout develop :develop브랜치로 이동

git checkout main

git merge : 병합 (main + master)

git push

git branch -d develop : develop브랜치 제거


--

git reset + 파일명 : staging area에서 파일 내리기

git status 

->modified : 파일이 수정되었을때

git checkout -- 파일명 : 원래 상태로 소스코드 되돌리기

git commit --amend : 커밋 메세지 수정하기


--

깃 동작 원리

working directory : 작업할 파일이 있는 디렉토리

Staging area : 커밋을 수행할 파일들이 올라가는 영역 (add명령)

git directory : git프로젝트의 메타 데이터와 데이터 정보가 저장되는 디렉토리 


[Working directory] -> 'git add' -> [Staging Area] -> 'git commit' -> [Local Repo] -> 'git push' -> [Reomte Repo]


[Reomte Repo] -> 'git fetch' ->  [Local Repo] 

git fetch: 다른 사람이 작업한 것을 자신(local)의 컴퓨터로 받을 수 있다.



[Local Repo] -> 'git merge' -> [Working directory]


git merge : 동시 작업을 하여 충돌이 발생하는 경우, 우리 컴퓨터와 리모트 리포지토리를 맞추어 주는 역할.

git fetch와 git merge를 합치면 git pull이라고 한다.

--

git → 깃 명령어의 사용법

git — version →깃 버전 출력

git config —global →환경설정 (컴퓨터 전체에서 동일한 옵션 설정)

cd → change directory 

ex) C드라이브의 git_education폴더로 가고싶다 

cd C : \git_education

폴더 내에서의 이동 ex→(cd git_)

클론 :  git clone + (github레퍼터리 주소)

ex ) git clone [https://github.com/khj0426/git_](https://github.com/khj0426/git_)

클론 까지 했으면 파일을 만든다 

파일 만들고  git add 파일이름

ex(파일이름이 document 이고 확장자가 txt이면 git add document.txt)

그 다음 git commit 메세지 

git commit -m “(메세지 내용)”

마지막으로 git push


git reromte add + 깃허브 repo url : 특정한 원격 저장소 등록(깃허브 repo에)

git remote -v:전체목록확인

git remote rename '원래이름' '바꿀이름' : 원격 저장소 이름 바꾸기

git remote rm temp :temp라는 원격 저장소 제거

--






